// Vertex program to wave some grass about
// Simplistic, assumes base of the grass at 0
void grass_vp(float4 position : POSITION,
			  float3 normal   : NORMAL,
			  float2 uv		  : TEXCOORD0,
			  out float4 oPosition : POSITION,
			  out float2 oUv	   : TEXCOORD0,
			  out float4 colour    : COLOR,

			  uniform float4x4 worldViewProj,
			  uniform float4 ambient,
			  uniform float4 objSpaceLight,
			  uniform float4 lightColour,
			  uniform float4 offset)
{
	float4 mypos = position;
	//offset = float4(0.5, 0, 0, 0);
	mypos = mypos + offset * mypos.yyyy;
	oPosition = mul(worldViewProj, mypos);

	oUv = uv;
	// get vertex light direction (support directional and point)
	float3 light = normalize(
		objSpaceLight.xyz -  (position.xyz * objSpaceLight.w));
	float diffuseFactor = max(dot(normal, light), 0);
	
	
	colour = ambient + diffuseFactor * lightColour;
	colour.w = 200;
}

// Vertex program to wave some grass about
// Simplistic, assumes base of the grass at 0
void grassfader_vp(float4 position : POSITION,
			  float3 normal   : NORMAL,
			  float2 uv		  : TEXCOORD0,
			  out float4 oPosition : POSITION,
			  out float2 oUv	   : TEXCOORD0,
			  out float4 colour    : COLOR,
			  out float oFog       : FOG,
			  

			  uniform float4x4 worldViewProj,
			  uniform float4 ambient,
			  uniform float4 objSpaceLight,
			  uniform float4 lightColour,
			  uniform float4 offset)
{

    float4 mypos = position; 
// 	mypos = mypos + offset * mypos.yyyy;
   if (uv.y < 0.37f) {
   	mypos = mypos + ((uv.y-0.37f) * 2.7 *offset * 0.2); //500  to have the same movement amplitude 
	} else if (uv.y < 0.75f) {
   	mypos = mypos + ((uv.y-0.75f) * 2.7 *offset * 0.2); //500  to have the same movement amplitude 
	}

 	
	oPosition = mul(worldViewProj, mypos);

	oUv = uv;
	// get vertex light direction (support directional and point)
	float3 light = normalize(
		objSpaceLight.xyz -  (position.xyz * objSpaceLight.w));
	float diffuseFactor = max(dot(normal, light), 0);
	
	
	colour = ambient + diffuseFactor * lightColour;
	
	//starting at the distance of 16 meters, fade out vertices until the distance of 32 meters, where they should be transparent
	colour.w = colour.w * ((32 - (oPosition.z ))   / 16);
	oFog = oPosition.x;
}
